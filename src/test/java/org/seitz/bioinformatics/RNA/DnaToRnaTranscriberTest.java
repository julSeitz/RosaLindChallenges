package org.seitz.bioinformatics.RNA;


import org.junit.jupiter.api.Test;
import org.seitz.bioinformatics.DNA.InvalidNucleotideException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class DnaToRnaTranscriberTest {

    @Test
    public void transcribesDnaToRnaCorrectly() throws SequenceTooLongException, InvalidNucleotideException {
        DnaToRnaTranscriber transcriber = new DnaToRnaTranscriber();
        assertEquals("GAUGGAACUUGACUACGUAAAUU", transcriber.transcribeDnaToRna("GATGGAACTTGACTACGTAAATT"));
    }

    @Test
    public void doesNotAcceptTooLongSequences() {
        DnaToRnaTranscriber transcriber = new DnaToRnaTranscriber();
        assertThrows(SequenceTooLongException.class,
                () -> transcriber.transcribeDnaToRna("GTGTGGCTAGATCTTAGCTTTCGTCACTAGAGGGCCCACGCTTAGTTTTTATGATCCATTGATCTCCTAGACGCTGCAAGATTTGCAACCAGGCAGACTTAGCGGTAGGTCCTAGTGCAGCGGGACTTTTTTTCTATAGTCGTTGAGAGGAGGAGTCGTCAGACCAGATACCTTTGATGTCCTGATTGGAAGGACCGTTGGCCCCCGACCCTTAGACAGTGTACTCAGTTCTATAAACGAGCTATTAGATATGAGATCCGTAGATTGAAAAGGGTGACGGAATTCGCCCGGACGCAAAAGACGGACAGCTAGGTATCCTGAGCACGGTTGCGCGTCCGAATCAAGCTCCTCTTTACAGGCCCCGGTTTCTGTTGGTCGTAGAGCGCAGAACGGATTGGGGGGATGTACGACAATATCTCTTAGTCACCTTTGGGTCACGGTCTGCTACCTTACAGGAATTCAGACCGTCCTTTAATTTCCCTTGCATATATGTTGCGTTTCTTCGACCTTCTAACCGCACCCTTAGGACGAAGACAGATACGTTCTTACCCATACTCCACCGTTGGCAGCGGGATCGCATGTCCCACGTGAAACATTGCTAAACCCTCAGGCCTCTGAGCGACAAAAGCTTTAAAGGGAAATTCGCGCCCATAACTTGGTCCGAATACGGGTTCTAGCATCGTTCGTCTGAGTTTGTTCTATATAAAACGGGCGCAATGTCTGCTTTGATCAACCTCCAATACCTCGTATGATTGTGCACCCGCCGGTGACCACTCAATGATGTGGGGTCCCCGTTGCAACTACGAGGATTTATTGAGACCGACCTACGTTCGGCATTGTGGGCAGAGTGAAGTATTGGCAAACGTTAAGTGCCGAACTAGATCTGACCTAACGGTAAGAGAGTTTCATAATACGTCCAGCCGCATGCGCAGGGTACATTTGGACAGTATTGAATGGACTCTGATCAACCTTCACACCGATCTAGAAACGAGTGCGTAGAT"));
    }

    @Test
    public void onlyAcceptsValidDnaSequence() {
        DnaToRnaTranscriber transcriber = new DnaToRnaTranscriber();
        assertThrows(InvalidNucleotideException.class, () -> transcriber.transcribeDnaToRna("AGCTH"));
    }
}
